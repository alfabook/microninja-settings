#!/usr/bin/env python
# -*- coding: utf-8 -*-
# kano-wifi
#
# Copyright (C) 2013 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# This script is a guided, interactive step-by-step process to connect to a wireless network.
# Sets return code to 0 if connected, anything else meaning an error occured.
#
# Exit codes:
#
# 1 need root privileges
# 2 no wifi dongle connected
# 3 a connection attempt is already in progress
#
# Copyright (C) 2016 Alfabook srl
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
# rebadged with microninja

import os
import sys
import time
import threading
import subprocess

from microninja.network import IWList, is_device, is_connected, connect, is_gateway, \
    is_internet, KwifiCache, reload_kernel_module, is_redirected, \
    launch_browser
from microninja.utils import is_model_a, is_model_b

NETWORKS_PER_PAGE = 5


class GetPasswordHideAsYouType:

    def __init__(self, enter_key=0x0d, backspace_key=0x7f, delay=.5, hide_char='*', max_length=64):
        self.password = ''
        self.enter_key = enter_key
        self.backspace_key = backspace_key
        self.delay = delay
        self.hide_char = hide_char
        self.max_length = max_length

    def __call__(self):
        import tty
        import termios
        from termios import tcflush, TCIOFLUSH

        # reset password so you don't need to reinstantiate
        self.password = ''

        # setup stdin to read unbuffered so we get 1 key reads
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)

        # empty possibly typeahead keyboard entries
        tcflush(sys.stdin, TCIOFLUSH)

        try:
            tty.setraw(sys.stdin.fileno())
            while True:
                typed_char = sys.stdin.read(1)
                if ord(typed_char) == self.enter_key:
                    break
                elif ord(typed_char) == self.backspace_key:
                    # that's the backspace
                    sys.stdout.write('\b \b')
                    sys.stdout.flush()
                    self.password = self.password[:len(self.password) - 1]
                elif ord(typed_char) > 132 or ord(typed_char) < 32:
                    # Terminal bell
                    pass
                elif len(self.password) == self.max_length:
                    break
                else:
                    sys.stdout.write(typed_char)
                    sys.stdout.flush()
                    time.sleep(self.delay)
                    sys.stdout.write('\b%c' % self.hide_char)
                    sys.stdout.flush()
                    self.password += typed_char
        finally:
            # restore terminal if we can't setup
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

        return self.password


def display_networks(iwl, page=0, perpage=NETWORKS_PER_PAGE):

    start = page * perpage
    end = page * perpage + perpage
    displayed = 0

    subprocess.call(['clear'])
    subprocess.call(['typewriter_echo', '\n Choose a network:', '0', '2'])

    for idx, netw in enumerate(iwl[start:end]):
        enctxt = 'Open'
        if netw['encryption'] != 'off':
            enctxt = 'Protected'

        string_network = '{{1 %2d }} - {{2 %s }} - %s' % (start + idx + 1, netw['essid'], enctxt)
        subprocess.call(['colour_echo', string_network])
        displayed += 1

    return displayed


def prompt_hidden():

    protection = essid = encryption = None

    msg = 'Enter the name of the hidden network'
    subprocess.call(['typewriter_echo', msg, '0', '1'])
    essid = raw_input().strip()
    while not len(essid):
        msg = '{{6 - }} {{5 Please enter the name of the hidden wireless network (SSID) }}'
        subprocess.call(['typewriter_echo', msg, '0', '1'])
        essid = raw_input().strip()

    msg = 'Is the network protected? {{1 N}}o, {{1 W}}EP, W{{1P}}A '
    subprocess.call(['typewriter_echo', msg, '0', '1'])
    protection = raw_input().strip()
    while protection.upper() not in ('N', 'W', 'P'):
        msg = '{{6 - }} {{5 Please answer }} {{1 N }}{{5,}} {{1 W }}{{5, or }} {{1 P }}'
        subprocess.call(['typewriter_echo', msg, '0', '1'])
        protection = raw_input().strip()

    if protection.upper() == 'N':
        encryption = 'off'
    elif protection.upper() == 'W':
        encryption = 'wep'
    elif protection.upper() == 'P':
        encryption = 'wpa'

    return (essid, encryption)


def connect_with_retry(wiface, essid, encryption):
    '''
Connects to a wireless network, either open or protected.
If it is protected, it prompts for the password
with a retry option in case the connection fails.
Returns true if online.
'''
    online = False
    enckey = None

    if encryption == 'off':
        # for open networks, attempt a connection and return online status

        # whilst we connect, we display a spinner animation
        animation = SpinnerAnimation(speed=0.5, stages=10)
        animation.start()

        # FIXME: Reload until linux kernel module is fixed
        reload_kernel_module()

        connect(wiface, essid, encryption, enckey)
        animation.stop()
        animation.join()

        online = is_gateway(wiface)
    else:
        # for protected networks, prompt for password, try connection
        # and give option to re-enter password in case it fails
        passprompt = GetPasswordHideAsYouType()
        retry_pass = 'Y'
        while retry_pass in ('Y', 'YES', ''):
            msg = ' What\'s the network password?'
            subprocess.call(['typewriter_echo', msg, '0', '1'])
            enckey = passprompt()
            while not len(enckey):
                msg = ' {{8 x }} {{7 Please enter a valid network password }}'
                subprocess.call(['typewriter_echo', msg, '0', '1'])
                enckey = passprompt()

            # whilst we connect, we display a spinner animation
            print "\n"
            spinner_text = ' Trying %s, please stand by ' % essid
            animation = SpinnerAnimation(speed=0.5, stages=5, text=spinner_text)
            animation.start()

            # FIXME: Reload until linux kernel module is fixed
            reload_kernel_module()

            connect(wiface, essid, encryption, enckey)
            animation.stop()
            animation.join()
            print "\n"

            online = is_gateway(wiface)
            if not online:
                msg = '{{6 - }} {{5 Couldn\'t connect to }}{{2 %s }}' % essid
                subprocess.call(['typewriter_echo', msg, '0', '1'])
                msg = '{{6 - }} {{5 Do you want to re-enter the password? }} {{1 [Y]es/[n]o }} '
                subprocess.call(['typewriter_echo', msg, '0', '0'])
                retry_pass = raw_input().strip().upper()
                print "\n"
            else:
                break

    return (online, enckey)


class SpinnerAnimation(threading.Thread):
    '''
This thread is a simple progressbar-like animation.
You can set the speed and stages when you create the object.
To use it, simply create and start() the animation thread.
When you want to terminate the animation, call stop() and then join().
'''

    def __init__(self, speed=1, stages=10, text=""):
        super(SpinnerAnimation, self).__init__()

        self._stop = threading.Event()
        self.speed = speed
        self.max_stage = stages + 1
        self.text = text

        # color_echo may be called here for more interesting graphics
        self.completed_symbol = "."
        self.uncompleted_symbol = " "

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()

    def draw_spinner(self, stage):
        spinner = self.text

        for progress in range(0, stage):
            spinner += self.completed_symbol

        for progress in range(stage + 1, self.max_stage):
            spinner += self.uncompleted_symbol

        spinner += "\r"

        sys.stdout.write(spinner)
        sys.stdout.flush()

    # The animation loop checks for the stopped flag every 'speed' seconds.
    # When the animation is terminated, it prints a line of spaces
    # to make sure the graphics are removed.
    def run(self):
        while True:
            for stage in range(0, self.max_stage):
                self.draw_spinner(stage)
                time.sleep(self.speed)

                if self.stopped():
                    return


if __name__ == '__main__':

    # Load the cache
    wificache = KwifiCache()

    selected = online = None
    wiface = 'wlan0'
    page = 0

    #
    # We first need to do some environment sanity checks
    #

    if not os.getuid() == 0:
        subprocess.call(['typewriter_echo', '{{8 x }} {{7 You need root privileges to start this app. Please try sudo }}', '2', '1'])
        sys.exit(1)

    # Process command-line parameters if given
    if len(sys.argv) > 1:

        # -s is a status request for the user to know if connected or not
        #
        if sys.argv[1] == '-s':
            a, _, _, linked = is_connected(wiface)
            if not linked:
                subprocess.call(['typewriter_echo', '{{6 - }} {{5 wireless network is not connected }}', '1', '2'])
            else:
                msg = '{{4 + }} {{3 connessione wireless collegata a }}{{2 %s }}' % (a)
                subprocess.call(['typewriter_echo', msg, '1', '2'])

            sys.exit(0)

        # Any other value will be considered as the filename to a custom wpa_supplicant configuration file
        #
        else:
            wpaconf = sys.argv[1]
            connect(wiface, '', None, None, wpa_custom_file=wpaconf)
            a, _, _, linked = is_connected(wiface)
            if not linked:
                msg = '{{6 - }} {{5 Couldn\'t connect using configuration {{2 %s }}. }}' % wpaconf
                subprocess.call(['typewriter_echo', msg, '1', '2'])
                sys.exit(2)
            else:
                msg = '{{4 + }} {{3 Ottimo! sei connesso a {{2 %s }}! }}' % a
                subprocess.call(['typewriter_echo', msg, '1', '2'])

                # cache this custom network so it is connected during next system boot
                wificache.save('', None, None, wpaconf)
                sys.exit(0)

    #
    # Start the walkthrough process to get connected
    #
    subprocess.call(['clear'])
    # Step 1: intro
    # Step 2: check for internet connection over Ethernet or usb
    if is_internet() and not is_device(wiface):
        msg = '{{4 + }} {{3 Good news! It looks like you already have internet }}'
        subprocess.call(['typewriter_echo', msg, '1', '2'])
        sys.exit(0)

    # Step 3: check for WiFi dongle
    while not is_device(wiface):
        # We might have gained internet at some point during this loop
        if is_internet():
            msg = '{{4 + }} {{3 Good news! It looks like you already have internet }}'
            subprocess.call(['typewriter_echo', msg, '1', '2'])
            sys.exit(0)
        subprocess.call(['/bin/sync'])  # Flush system IO buffers to disk to avoid corruption
        subprocess.call(['typewriter_echo', 'First, plug in your {{2wifi piece}}.', '0', '2'])
        if is_model_a() or is_model_b():
            subprocess.call(['typewriter_echo', 'Please take into account that the system will automatically reboot.', '0', '2'])
            subprocess.call(['typewriter_echo', 'If you don\'t want to use WiFi, press {{1 ENTER }}.', '2', '0'])
            raw_input().strip()
            subprocess.call(['clear'])
            sys.exit(0)
        # Model B+
        subprocess.call(['typewriter_echo', 'Press {{1 ENTER }} when ready.', '1', '0'])
        raw_input().strip()
        subprocess.call(['clear'])

    # Step 3.1: If dongle is connected and networking is up, offer option to forget wireless network.
    netname, _, _, linked = is_connected(wiface)
    if netname and linked:
        msg = '\n Sei connesso alla rete {{2 %s }}' % netname
        subprocess.call(['typewriter_echo', msg, '2', '1'])
        msg = " Vuoi dimenticare questa rete e sceglierne un'altra? {{1 [y]es/[N]o }} "
        subprocess.call(['typewriter_echo', msg, '0', '0'])
        var = raw_input().strip()
        if var and (var.upper() == 'Y' or var.upper() == 'YES'):
            # FIXME: Reload until linux kernel module is fixed
            reload_kernel_module()
            wificache.empty()
        else:
            sys.exit(0)

    # Step 4: WiFi dongle > show networks menu
    subprocess.call(['typewriter_echo', '\n Help me find the signal.', '1', '2'])

    # Scan networks in range
    iwl = IWList(wiface).getList(unsecure=False, first=False)
    totalNetworks = len(iwl)
    displayed = display_networks(iwl, page)
    while not online:
        if totalNetworks == 0:
            subprocess.call(['typewriter_echo', '{{6 - }} {{5 I can\'t find any wireless signals. Do you want to scan again? }} {{1 [Y]es/[n]o }} ', '0', '0'])
            var = raw_input().strip()
            if var and (var.upper() != 'Y' or var.upper() != 'YES'):
                subprocess.call(['typewriter_echo', 'Exiting...', '1', '2'])
                sys.exit(0)
        print ' Total networks: %d, Page: %d' % (totalNetworks, page + 1)
        print ' ----------'
        subprocess.call(['colour_echo', ' {{1 r }} -> Rescan'])
        if totalNetworks > (page + 1) * NETWORKS_PER_PAGE:
            subprocess.call(['colour_echo', ' {{1 n }} -> Next page'])
        if page > 0:
            subprocess.call(['colour_echo', ' {{1 p }} -> Previous page'])
        subprocess.call(['colour_echo', ' {{1 h }} -> Connect to hidden network'])
        subprocess.call(['colour_echo', ' {{1 s }} -> Skip'])
        print ' ----------'
        var = raw_input("\n Choose a network number or option letter: ").strip()

        if var in ('s', 'S'):
            sys.exit(1)
        elif var in ('r', 'R'):
            msg = 'Scanning...'
            subprocess.call(['typewriter_echo', msg, '0', '2'])
            iwl = IWList(wiface).getList(unsecure=False, first=False)
            totalNetworks = len(iwl)
            page = 0
            displayed = display_networks(iwl, page)
        elif (totalNetworks > (page + 1) * NETWORKS_PER_PAGE) and var in ('n', 'N'):
            page += 1
            displayed = display_networks(iwl, page)
        elif page > 0 and var in ('p', 'P'):
            page -= 1
            displayed = display_networks(iwl, page)
        elif var in ('h', 'H'):
            # Prompt the user which hidden network we should connect to
            (essid, encryption) = prompt_hidden()

            # Request password and try to connect with password retry option
            (online, enckey) = connect_with_retry(wiface, essid, encryption)
            if not online:
                selected = None
                page = 0
                displayed = display_networks(iwl, page)
            else:
                wificache.save(essid, encryption, enckey)

        elif not var.isdigit() or not int(var) \
                in range(page * NETWORKS_PER_PAGE + 1, page * NETWORKS_PER_PAGE + displayed + 1):
            msg = '{{6 - }} {{5 This option is not in range! Please try again }}'
            subprocess.call(['typewriter_echo', msg, '1', '2'])
            displayed = display_networks(iwl, page)
        else:
            # Collect wireless connection parameters
            selected = int(var) - 1
            essid = (iwl[selected]['essid'])
            encryption = (iwl[selected]['encryption'])
            enckey = None

            msg = '\n Let\'s connect to {{2 %s }}' % essid
            subprocess.call(['typewriter_echo', msg, '0', '2'])

            # Request password and try to connect with password retry option
            (online, enckey) = connect_with_retry(wiface, essid, encryption)
            if not online:
                selected = None
                page = 0
                displayed = display_networks(iwl, page)
            else:
                wificache.save(essid, encryption, enckey)

    netname, _, _, linked = is_connected(wiface)
    if netname and linked:
        subprocess.call(['typewriter_echo', '\n{{4 + }} {{3 Great! You are connected }}', '2', '2'])

    # Step 5: ping exercise
    # Check for redirection
    if not is_redirected():
        # Ask for ping
        subprocess.call(['typewriter_echo', ' Do you want to test your connection? {{1 [y]es/[N]o }} ', '0', '0'])
        var = raw_input().strip()
        if var and (var.upper() == 'Y' or var.upper() == 'YES'):
            subprocess.call(['typewriter_echo', '\n Type {{2 ping www.google.com }}', '1', '2'])
            while True:
                var = raw_input().strip()
                if var == 'ping www.google.com' or var == 'ping google.com':
                    rc = subprocess.call(['ping', 'google.com', '-c', '1'])
                    break
                else:
                    subprocess.call(['typewriter_echo', '{{6 - }} {{5 Not the correct command, try again: }} {{2 ping www.google.com }}', '0', '2'])

            if not rc == 0:
                subprocess.call(['typewriter_echo', '{{8 x }} {{7 Oops! It seems the Internet is not reachable... Don\'t worry, we can still play! }}', '2', '2'])
            else:
                subprocess.call(['typewriter_echo', '\n{{4 + }} {{3 Brilliant! Internet is working }}', '2', '2'])
    else:
        # Launch browser
        subprocess.call(['typewriter_echo', '\nLaunching the browser so you can log in', '2', '2'])
        launch_browser()

        subprocess.call(['colour_echo', 'Press {{1 ENTER }} to continue', '1', '2'])
        raw_input().strip()

    # Step 6: exit
    sys.exit(0)
